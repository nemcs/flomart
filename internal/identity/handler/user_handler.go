// HTTP-—Ö–µ–Ω–¥–ª–µ—Ä—ã
package handler

import (
	"flomart/domain/user"
	"flomart/internal/apperror"
	"flomart/internal/identity"
	"flomart/internal/identity/dto"
	"flomart/internal/identity/service"
	"flomart/pkg/contextutils"
	"flomart/pkg/httphelper"
	"flomart/pkg/validation"
	"net/http"
)

// TODO ‚ö†Ô∏è	–ù–µ—Ç return –ø–æ—Å–ª–µ _ = utils.WriteError –≤ branch‚Äô–∞—Ö‚ÄØ‚Äî –∏–Ω–æ–≥–¥–∞ –∑–∞–±—ã–ª.
// TODO üîß	utils.LogAndWriteError –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ–≥–¥–∞ Warn. –î–µ–ª–∞–π —É—Ä–æ–≤–µ–Ω—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º (Error –¥–ª—è 5xx).
// TODO üí°	–í–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ middleware‚Äë–≤–∞–ª–∏–¥–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ –≤ –∫–∞–∂–¥–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ.
type Handler struct {
	service service.Service
}

func NewHandler(s service.Service) *Handler {
	return &Handler{service: s}
}

//TODO –Ω–∞–¥–æ –ª–∏ –≤–µ–∑–¥–µ LogAndWriteError —á—Ç–æ–±—ã –±—ã–ª–æ –µ–¥–∏–Ω–æ –≤—Å–µ –∏–ª–∏ –º–æ–∂–Ω–æ –º–µ—Å—Ç–∞–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ WriteError, –µ—Å–ª–∏ –ª–æ–≥–∏ –Ω–µ –Ω—É–∂–Ω—ã

func (h *Handler) RegisterUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	defer r.Body.Close()

	input, err := httphelper.DecodeJSON[dto.RegisterInput](r)
	if err != nil {
		appErr := apperror.New(err, identity.ErrInvalidJSONMsg, identity.ErrInvalidJSONDev, http.StatusBadRequest)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}
	regInput := *input

	// –≤–∞–ª–∏–¥–∞—Ü–∏—è input
	if err = validation.ValidateStruct(regInput); err != nil {
		appErr := apperror.Wrap(err, identity.ErrBadRequestMsg, identity.ErrValidationDev, http.StatusBadRequest)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}

	//–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –ø–µ—Ä–µ–¥–∞–µ–º –≤ service
	id, err := h.service.RegisterUser(ctx, regInput)
	if err != nil {
		appErr := apperror.Wrap(err, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å", "service.RegisterUser: –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", http.StatusBadRequest)
		_ = httphelper.WriteJSONError(w, *appErr)
		return
	}

	// –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–∞–∫—É
	_ = httphelper.WriteJSONResponse(w, map[string]user.ID{"id": id}, http.StatusCreated)
}

func (h *Handler) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	defer r.Body.Close()

	input, err := httphelper.DecodeJSON[dto.LoginInput](r)
	if err != nil {
		appErr := apperror.New(err, identity.ErrInvalidJSONMsg, identity.ErrInvalidJSONDev, http.StatusBadRequest)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}

	access, refresh, err := h.service.LoginUser(ctx, *input)
	if err != nil {
		appErr := apperror.Wrap(err, identity.ErrInvalidCredentialsMsg, "service.LoginUser: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", http.StatusUnauthorized)
		_ = httphelper.WriteJSONError(w, *appErr)
		return
	}

	_ = httphelper.WriteJSONResponse(w, dto.TokenPairResponse{
		AccessToken:  access,
		RefreshToken: refresh,
	}, http.StatusOK)
	//_ = utils.WriteJSONResponse(w, map[string]string{"token": accessToken}, http.StatusOK)
}

func (h *Handler) ProfileUser(w http.ResponseWriter, r *http.Request) {
	userFromCtx, err := contextutils.GetUserFromCtx(r.Context())
	if err != nil {
		appErr := apperror.Wrap(err, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", "handler.ProfileUser: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ context user", http.StatusUnauthorized)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}

	resp := map[string]any{
		"id":    userFromCtx.UserID,
		"role":  userFromCtx.Role,
		"token": "OK",
	}

	_ = httphelper.WriteJSONResponse(w, resp, http.StatusOK)
}

func (h *Handler) RefreshTokens(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	input, err := httphelper.DecodeJSON[dto.RefreshInput](r)
	if err != nil {
		appErr := apperror.New(err, identity.ErrInvalidJSONMsg, identity.ErrInvalidJSONDev, http.StatusBadRequest)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}

	access, refresh, err := h.service.RefreshTokens(r.Context(), *input)
	if err != nil {
		appErr := apperror.Wrap(err, identity.ErrTokenInvalidClaims.Error(), "service.RefreshToken", http.StatusUnauthorized)
		httphelper.LogAndWriteError(w, *appErr)
		return
	}

	_ = httphelper.WriteJSONResponse(w, dto.TokenPairResponse{
		AccessToken:  access,
		RefreshToken: refresh,
	}, http.StatusOK)
}
