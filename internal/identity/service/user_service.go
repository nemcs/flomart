// service - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
package service

import (
	"context"
	"errors"
	"flomart/domain/user"
	"flomart/internal/identity"
	"flomart/internal/identity/repository"
	"flomart/pkg/logger"
	"github.com/jackc/pgx/v5"
	"golang.org/x/crypto/bcrypt"
	"log/slog"
)

//TODO ‚ö†Ô∏è	–í–µ—Ç–∫–∞ existing != nil ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å ErrEmailAlreadyExists, –Ω–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—à—å —Å—Ç—Ä–æ–∫–æ–π –∏–∑ –æ—à–∏–±–∫–∏. –õ—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å AppError (–∫–æ–¥ 409) —Å—Ä–∞–∑—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞.
//TODO ‚ö†Ô∏è	–í –≤–µ—Ç–∫–µ repo.CreateUser¬†‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å pgErr.Code == 23505. TODO —É–∂–µ –µ—Å—Ç—å¬†‚Äî —Å–¥–µ–ª–∞–π.
//TODO üîß	logger.Log.Warn –¥–ª—è –æ—à–∏–±–∫–∏ –ë–î¬†‚Äî –≤—Å—ë‚Äë—Ç–∞–∫–∏ —ç—Ç–æ Error (–ª—ë–≥–∫–∞—è –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö).
//TODO üí°	–ü–∞—Ä–æ–ª–∏: –¥–æ–±–∞–≤—å bcrypt.MinCost –≤ –∫–æ–Ω—Ñ–∏–≥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å cost.

type Service interface {
	RegisterUser(ctx context.Context, input identity.RegisterInput) (user.ID, error)
	LoginUser(ctx context.Context, input identity.LoginInput) (string, error)
}
type service struct {
	repo repository.Repository
}

func NewService(repo repository.Repository) Service {
	return &service{repo: repo}
}

func (s *service) RegisterUser(ctx context.Context, input identity.RegisterInput) (user.ID, error) {
	existing, err := s.repo.FindByEmail(ctx, input.Email)

	if err != nil && !errors.Is(err, pgx.ErrNoRows) {
		logger.Log.Warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email", slog.String(logger.FieldErr, err.Error()))
		return "", identity.ErrEmailSearch
	}
	if existing != nil {
		logger.Log.Warn("Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", slog.String("email", input.Email))
		return "", identity.ErrEmailAlreadyExists
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		logger.Log.Warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è", slog.String(logger.FieldErr, err.Error()))
		return "", identity.ErrHashingPassword
	}

	u := user.New(input.Email, string(hashedPassword), input.Role, input.Name, input.Phone)

	id, err := s.repo.CreateUser(ctx, *u)
	//TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ pgError.Code == "23505"
	// –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
	if err != nil {
		logger.Log.Warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω", slog.String(logger.FieldSQL, err.Error()))
		return "", err
	}
	return *id, nil
}

func (s *service) LoginUser(ctx context.Context, input identity.LoginInput) (string, error) {
	//–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	u, err := s.repo.FindByEmail(ctx, input.Email)
	if err != nil {
		logger.Log.Info(identity.ErrUserNotFoundDev, slog.String(logger.FieldSQL, err.Error()))
		return "", identity.ErrUserNotFound
	}

	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	if err = bcrypt.CompareHashAndPassword([]byte(u.PasswordHash), []byte(input.Password)); err != nil {
		logger.Log.Info(identity.ErrPasswordHashDev, slog.String(logger.FieldErr, err.Error()))
		return "", identity.ErrInvalidCredentials
	}

	// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
	tokenStr, err := identity.CreateToken(u.ID, u.Role)
	if err != nil {
		logger.Log.Error(identity.ErrTokenGenDev, slog.String(logger.FieldErr, err.Error()))
		//TODO –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ErrInternalServerMsg
		return "", identity.ErrInvalidCredentials
	}
	return tokenStr, nil
}
