package repository

import (
	"context"
	"flomart/domain/user"
	"flomart/internal/identity"
	"fmt"
	"github.com/jackc/pgx/v5/pgxpool"
)

// TODO ‚ö†Ô∏è	CreateUser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *ID, –∞ —Å–µ—Ä–≤–∏—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–π: —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ nil¬†‚Äî –≤–∞–ª–∏–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –î–ª—è id –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç–æ user.ID.
// TODO üîß	FindByEmail: –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬†‚Äî –≤–µ—Ä–Ω–∏ pgx.ErrNoRows, –∞ –Ω–µ fmt.Errorf(...), —á—Ç–æ–±—ã errors.Is —Ä–∞–±–æ—Ç–∞–ª.

type Repository interface {
	CreateUser(ctx context.Context, ser user.User) (*user.ID, error)
	FindByEmail(ctx context.Context, email string) (*user.User, error)
}
type repository struct {
	db *pgxpool.Pool
}

func NewRepository(db *pgxpool.Pool) Repository {
	return &repository{db: db}
}

// –°–æ–∑–¥–∞–µ–º —é–∑–µ—Ä–∞ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ id –≤ service —Å–ª–æ–π
// –†–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ø–∏–µ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º? –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, –ø–æ—ç—Ç–æ–º—É –∫–æ–ø–∏–µ–π, –∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –≤ –ø—Ä–æ–¥–µ?
// ???–ù–æ —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil, –∞ –Ω–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É user.ID –∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—à–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å, –Ω–æ—Ä–º –ª–∏ —ç—Ç–æ –ø—Ä–∞–∫—Ç–∏–∫–∞?
func (repo *repository) CreateUser(ctx context.Context, u user.User) (*user.ID, error) {
	query := `
insert into users (email, password_hash, role, full_name, phone, is_active, created_at, updated_at) 
values ($1, $2, $3, $4, $5, $6, $7, $8) 
returning id`
	var id user.ID
	if err := repo.db.QueryRow(ctx, query, u.Email, u.PasswordHash, u.Role, u.FullName, u.Phone, u.IsActive, u.CreatedAt, u.UpdatedAt).Scan(&id); err != nil {
		return nil, fmt.Errorf("%s: %w", identity.ErrSqlInsertDev, err)
	}
	return &id, nil
}

func (repo *repository) FindByEmail(ctx context.Context, email string) (*user.User, error) {
	query := `select id, email, password_hash, role, full_name, phone, is_active, created_at, updated_at  from users where email = $1`
	row := repo.db.QueryRow(ctx, query, email)

	var u user.User

	err := row.Scan(
		&u.ID,
		&u.Email,
		&u.PasswordHash,
		&u.Role,
		&u.FullName,
		&u.Phone,
		&u.IsActive,
		&u.CreatedAt,
		&u.UpdatedAt)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", identity.ErrSqlSelectDev, err)
	}
	return &u, nil
}
